```dataviewjs

/*
    Table of Contents Script

    Should be pasted at the top of the page to outline
    all of the headers you want to list on the same page

    For this script, "path_sub" should not be edited.
*/

let count               = 0;
const path_base         = dv.current().file.path
const path_targ         = path_base.substr(0, path_base.lastIndexOf(".md"));
const path_sub          = ""

const filter_page       = '"' + path_targ + "" + path_sub + '"';
const filter_folder     = path_targ + path_sub;

let p = dv.pages(filter_page)
    .sort(p => p.file.path)
    .forEach(p =>
    {
        // dv.header(4, p.file.name); // display page name as header
        const cache = this.app.metadataCache.getCache(p.file.path);

        if (cache)
        {
            const headings = cache.headings; // get headings from cache

            if (headings)
            {
                const houtput = headings.slice(1) // exclude the first heading
                .filter(h => h.level <= 6)
                .map(h =>
                {
                    count++;

					var file_head     = h.heading
					var header_skip   = file_head.replace(/ /g,"_").toLowerCase();
					if (header_skip === "table_of_contents" || header_skip === "toc")
					{
						return ""
					}

                    // Determine indentation based on heading level
                    let indent        = " ".repeat(h.level);
                    var file_name     = p.file.name;
                    
                    // remove backticks and tag symbols
                    var file_head     = file_head.replace(/`/g, '');
                    var file_head     = file_head.replace(/#/g, '');
                    var file_title    = h.heading.split('#')[0];

                    let objLink       = "[[" + file_name + "#" + file_head + "|" + file_title + "]]";

                    if ( h.level == 1 )
                        return indent + "- <sub>" + objLink + "</sub>";
                    else if ( h.level == 2 )
                        return indent + " - <sub>" + objLink + "</sub>";
                    else if ( h.level == 3 )
                        return indent + "  - <sub>" + objLink + "</sub>";
                    else if ( h.level == 4 )
                        return indent + "   - <sub>" + objLink + "</sub>";
                    else if ( h.level == 5 )
                        return indent + "    - <sub>" + objLink + "</sub>";
                    else if ( h.level == 6 )
                        return indent + "     - <sub>" + objLink + "</sub>";
                    else
                        return indent + "- " + objLink;
                })
                .join("\n")

                dv.el("div", houtput);
                dv.el("div", "<br />");
            }
        }
    });

    /*
        display NO RESULTS
    */

    if (count === 0)
    {
        const rootNode = dv.el("div", "No results", { cls: "toc-results-none" });
        rootNode.setAttribute("style", "text-align:center;");
    }
```
